import tkinter as tk
from tkinter import messagebox
import sqlite3
import os

class LoginApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Login System")
        self.root.geometry("700x500")
        self.root.resizable(False, False)

        # Initialize database
        self.setup_database()

        # Show login page first
        self.show_login_frame()

    def setup_database(self):
        try:
            # First try to delete the existing database if it's corrupted
            if os.path.exists('users.db'):
                os.remove('users.db')
        except:
            pass

        # Create new database connection
        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        username TEXT PRIMARY KEY,
                        password TEXT NOT NULL
                    )
                ''')
                conn.commit()
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"An error occurred: {str(e)}")

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def show_login_frame(self):
        self.clear_window()
    
        # Main frame
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
    
        # Title
        tk.Label(frame, text="Login", font=("Arial", 24)).pack(pady=20)
    
        # Username
        tk.Label(frame, text="Username:").pack()
        self.username = tk.Entry(frame, width=30)
        self.username.pack(pady=5)
    
        # Password
        tk.Label(frame, text="Password:").pack()
        self.password = tk.Entry(frame, show="*", width=30)
        self.password.pack(pady=5)
    
        # Login button
        login_btn = tk.Button(frame, text="Login", 
                            command=self.login_user,
                            width=20)
        login_btn.pack(pady=20)
    
        # Create account link
        create_acc_btn = tk.Button(frame, text="Create New Account", 
                                 command=self.show_create_account_frame,
                                 width=20)
        create_acc_btn.pack()

    def show_create_account_frame(self):
        self.clear_window()
    
        # Main frame
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
    
        # Title
        tk.Label(frame, text="Create Account", font=("Arial", 24)).pack(pady=20)
    
        # Username
        tk.Label(frame, text="Choose Username:").pack()
        self.new_username = tk.Entry(frame, width=30)
        self.new_username.pack(pady=5)
    
        # Password
        tk.Label(frame, text="Choose Password:").pack()
        self.new_password = tk.Entry(frame, show="*", width=30)
        self.new_password.pack(pady=5)
    
        # Confirm Password
        tk.Label(frame, text="Confirm Password:").pack()
        self.confirm_password = tk.Entry(frame, show="*", width=30)
        self.confirm_password.pack(pady=5)
    
        # Submit button
        submit_btn = tk.Button(frame, text="Create Account", 
                             command=self.create_account,
                             width=20)
        submit_btn.pack(pady=20)
    
        # Back button
        back_btn = tk.Button(frame, text="Back to Login", 
                           command=self.show_login_frame,
                           width=20)
        back_btn.pack()
    
    def show_home_frame(self):
        self.clear_window()
    
        # Main frame
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
    
        # Title
        tk.Label(frame, text="Home Page", font=("Arial", 24)).pack(pady=20)
    
        # Navigation buttons
        buttons = [
            ("Shopping List", lambda: messagebox.showinfo("Info", "Shopping List Page")),
            ("Budget", lambda: messagebox.showinfo("Info", "Budget Page")),
            ("Analytics", lambda: messagebox.showinfo("Info", "Analytics Page"))
        ]
    
        for text, command in buttons:
            btn = tk.Button(frame, text=text, command=command, width=20)
            btn.pack(pady=10)
    
        # Logout button
        logout_btn = tk.Button(self.root, text="Logout", 
                             command=self.show_login_frame,
                             width=10)
        logout_btn.pack(side="bottom", anchor="se", padx=10, pady=10)

    def login_user(self):
        username = self.username.get()
        password = self.password.get()

        if not username or not password:
            messagebox.showerror("Error", "Please fill in all fields")
            return

        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM users WHERE username=? AND password=?',
                             (username, password))

                if cursor.fetchone():
                    self.show_home_frame()
                else:
                    messagebox.showerror("Error", "Invalid username or password")
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"An error occurred: {str(e)}")

    def create_account(self):
        username = self.new_username.get()
        password = self.new_password.get()
        confirm = self.confirm_password.get()

        if not username or not password or not confirm:
            messagebox.showerror("Error", "Please fill in all fields")
            return

        if password != confirm:
            messagebox.showerror("Error", "Passwords do not match")
            return

        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT INTO users VALUES (?, ?)',
                             (username, password))
                conn.commit()

            messagebox.showinfo("Success", "Account created successfully!")
            self.show_login_frame()

        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Username already exists")
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"An error occurred: {str(e)}")

def main():
    root = tk.Tk()
    app = LoginApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()import tkinter as tk
from tkinter import messagebox
import sqlite3
import os

class LoginApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Login System")
        self.root.geometry("700x500")
        self.root.resizable(False, False)

        # Initialize database
        self.setup_database()

        # Show login page first
        self.show_login_frame()

    def setup_database(self):
        try:
            # First try to delete the existing database if it's corrupted
            if os.path.exists('users.db'):
                os.remove('users.db')
        except:
            pass

        # Create new database connection
        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        username TEXT PRIMARY KEY,
                        password TEXT NOT NULL
                    )
                ''')
                conn.commit()
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"An error occurred: {str(e)}")

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def show_login_frame(self):
        self.clear_window()
    
        # Main frame
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
    
        # Title
        tk.Label(frame, text="Login", font=("Arial", 24)).pack(pady=20)
    
        # Username
        tk.Label(frame, text="Username:").pack()
        self.username = tk.Entry(frame, width=30)
        self.username.pack(pady=5)
    
        # Password
        tk.Label(frame, text="Password:").pack()
        self.password = tk.Entry(frame, show="*", width=30)
        self.password.pack(pady=5)
    
        # Login button
        login_btn = tk.Button(frame, text="Login", 
                            command=self.login_user,
                            width=20)
        login_btn.pack(pady=20)
    
        # Create account link
        create_acc_btn = tk.Button(frame, text="Create New Account", 
                                 command=self.show_create_account_frame,
                                 width=20)
        create_acc_btn.pack()

    def show_create_account_frame(self):
        self.clear_window()
    
        # Main frame
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
    
        # Title
        tk.Label(frame, text="Create Account", font=("Arial", 24)).pack(pady=20)
    
        # Username
        tk.Label(frame, text="Choose Username:").pack()
        self.new_username = tk.Entry(frame, width=30)
        self.new_username.pack(pady=5)
    
        # Password
        tk.Label(frame, text="Choose Password:").pack()
        self.new_password = tk.Entry(frame, show="*", width=30)
        self.new_password.pack(pady=5)
    
        # Confirm Password
        tk.Label(frame, text="Confirm Password:").pack()
        self.confirm_password = tk.Entry(frame, show="*", width=30)
        self.confirm_password.pack(pady=5)
    
        # Submit button
        submit_btn = tk.Button(frame, text="Create Account", 
                             command=self.create_account,
                             width=20)
        submit_btn.pack(pady=20)
    
        # Back button
        back_btn = tk.Button(frame, text="Back to Login", 
                           command=self.show_login_frame,
                           width=20)
        back_btn.pack()
    
    def show_home_frame(self):
        self.clear_window()
    
        # Main frame
        frame = tk.Frame(self.root, padx=20, pady=20)
        frame.pack(expand=True)
    
        # Title
        tk.Label(frame, text="Home Page", font=("Arial", 24)).pack(pady=20)
    
        # Navigation buttons
        buttons = [
            ("Shopping List", lambda: messagebox.showinfo("Info", "Shopping List Page")),
            ("Budget", lambda: messagebox.showinfo("Info", "Budget Page")),
            ("Analytics", lambda: messagebox.showinfo("Info", "Analytics Page"))
        ]
    
        for text, command in buttons:
            btn = tk.Button(frame, text=text, command=command, width=20)
            btn.pack(pady=10)
    
        # Logout button
        logout_btn = tk.Button(self.root, text="Logout", 
                             command=self.show_login_frame,
                             width=10)
        logout_btn.pack(side="bottom", anchor="se", padx=10, pady=10)

    def login_user(self):
        username = self.username.get()
        password = self.password.get()

        if not username or not password:
            messagebox.showerror("Error", "Please fill in all fields")
            return

        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM users WHERE username=? AND password=?',
                             (username, password))

                if cursor.fetchone():
                    self.show_home_frame()
                else:
                    messagebox.showerror("Error", "Invalid username or password")
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"An error occurred: {str(e)}")

    def create_account(self):
        username = self.new_username.get()
        password = self.new_password.get()
        confirm = self.confirm_password.get()

        if not username or not password or not confirm:
            messagebox.showerror("Error", "Please fill in all fields")
            return

        if password != confirm:
            messagebox.showerror("Error", "Passwords do not match")
            return

        try:
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('INSERT INTO users VALUES (?, ?)',
                             (username, password))
                conn.commit()

            messagebox.showinfo("Success", "Account created successfully!")
            self.show_login_frame()

        except sqlite3.IntegrityError:
            messagebox.showerror("Error", "Username already exists")
        except sqlite3.Error as e:
            messagebox.showerror("Database Error", f"An error occurred: {str(e)}")

def main():
    root = tk.Tk()
    app = LoginApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
